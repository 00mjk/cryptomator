name: Build

on:
  [push]

jobs: 
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      artifact-version: ${{ steps.setversion.outputs.version }}
    env:
      BUILD_VERSION: SNAPSHOT
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 14
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Ensure to use tagged version
        run: mvn versions:set --file main/pom.xml -DnewVersion=${GITHUB_REF##*/} # use shell parameter expansion to strip of 'refs/tags'
        if: startsWith(github.ref, 'refs/tags/')
      - name: Export the pom project version to the job environment and save it as an ouput of this job
        id: setversion
        run: |
          v=$(mvn help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          echo "::set-env name=BUILD_VERSION::${v}"
          echo "::set-output name=version::${v}"
      - name: Build and Test
        run: mvn -B install --file main/pom.xml -Pcoverage
      - name: Run Codacy Coverage Reporter
        run: |
          curl -o ~/codacy-coverage-reporter.jar https://repo.maven.apache.org/maven2/com/codacy/codacy-coverage-reporter/7.1.0/codacy-coverage-reporter-7.1.0-assembly.jar
          $JAVA_HOME/bin/java -jar ~/codacy-coverage-reporter.jar report -l Java -r main/commons/target/site/jacoco/jacoco.xml --partial
          $JAVA_HOME/bin/java -jar ~/codacy-coverage-reporter.jar report -l Java -r main/keychain/target/site/jacoco/jacoco.xml --partial
          $JAVA_HOME/bin/java -jar ~/codacy-coverage-reporter.jar report -l Java -r main/ui/target/site/jacoco/jacoco.xml --partial
          $JAVA_HOME/bin/java -jar ~/codacy-coverage-reporter.jar report -l Java -r main/launcher/target/site/jacoco/jacoco.xml --partial
          $JAVA_HOME/bin/java -jar ~/codacy-coverage-reporter.jar final
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
      - name: Assemble Buildkit
        run: mvn -B package -DskipTests --file main/pom.xml --resume-from=buildkit -Prelease
      - name: Upload buildkit-linux-${{ env.BUILD_VERSION }}.zip
        uses: actions/upload-artifact@v1
        with:
          name: buildkit-linux-${{ env.BUILD_VERSION }}.zip
          path: main/buildkit/target/buildkit-linux.zip
      - name: Upload buildkit-mac-${{ env.BUILD_VERSION }}.zip
        uses: actions/upload-artifact@v1
        with:
          name: buildkit-mac-${{ env.BUILD_VERSION }}.zip
          path: main/buildkit/target/buildkit-mac.zip
      - name: Upload buildkit-win-${{ env.BUILD_VERSION }}.zip
        uses: actions/upload-artifact@v1
        with:
          name: buildkit-win-${{ env.BUILD_VERSION }}.zip
          path: main/buildkit/target/buildkit-win.zip
          
  release:
    name: Draft a Release on GitHub Releases
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    env:
      WIN_ARTIFACT: buildkit-win-${{ needs.build.outputs.artifact-version }}.zip
      MAC_ARTIFACT: buildkit-mac-${{ needs.build.outputs.artifact-version }}.zip
      LINUX_ARTIFACT: buildkit-linux-${{ needs.build.outputs.artifact-version }}.zip
    steps:
      - name: Download buildkit-linux.zip
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.LINUX_ARTIFACT }}
          path: .
      - name: Download buildkit-mac.zip
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.MAC_ARTIFACT}}
          path: .
      - name: Download buildkit-win.zip
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.WIN_ARTIFACT }}
          path: .
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            :construction: Work in Progress
          draft: true
          prerelease: false
      - name: Upload ${{ env.LINUX_ARTIFACT }} to GitHub Releases
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.LINUX_ARTIFACT }}
          asset_name: ${{ env.LINUX_ARTIFACT }}
          asset_content_type: application/zip
      - name: Upload ${{ env.MAC_ARTIFACT }} to GitHub Releases
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.MAC_ARTIFACT }}
          asset_name: ${{ env.MAC_ARTIFACT }}
          asset_content_type: application/zip
      - name: Upload ${{ env.WIN_ARTIFACT }} to GitHub Releases
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.WIN_ARTIFACT }}
          asset_name: ${{ env.WIN_ARTIFACT }}
          asset_content_type: application/zip