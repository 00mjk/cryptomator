/*******************************************************************************
 * Copyright (c) 2017 Skymatic UG (haftungsbeschr√§nkt).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the accompanying LICENSE file.
 *******************************************************************************/
package org.cryptomator.launcher;

import javafx.application.Application;
import javafx.stage.Stage;
import org.apache.commons.lang3.SystemUtils;
import org.cryptomator.ui.controllers.MainController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

public class Cryptomator {

	private static final Logger LOG = LoggerFactory.getLogger(Cryptomator.class);
	private static final CryptomatorComponent CRYPTOMATOR_COMPONENT = DaggerCryptomatorComponent.create(); // DaggerCryptomatorComponent gets generated by Dagger. Run Maven and include target/generated-sources/annotations in your IDE.

	public static void main(String[] args) {
		LOG.info("Starting Cryptomator {} on {} {} ({})", CRYPTOMATOR_COMPONENT.applicationVersion().orElse("SNAPSHOT"), SystemUtils.OS_NAME, SystemUtils.OS_VERSION, SystemUtils.OS_ARCH);

		try (IpcFactory.IpcEndpoint endpoint = CRYPTOMATOR_COMPONENT.ipcFactory().create()) {
			endpoint.getRemote().handleLaunchArgs(args); // if we are the server, getRemote() returns self.
			if (endpoint.isConnectedToRemote()) {
				LOG.info("Found running application instance. Shutting down.");
			} else {
				CRYPTOMATOR_COMPONENT.debugMode().initialize();
				CleanShutdownPerformer.registerShutdownHook();
				Application.launch(MainApp.class, args);
			}
		} catch (IOException e) {
			LOG.error("Failed to initiate inter-process communication.", e);
			System.exit(2);
		} catch (Throwable e) {
			LOG.error("Error during startup", e);
			System.exit(1);
		}
		System.exit(0); // end remaining non-daemon threads.
	}

	// We need a separate FX Application class, until we can use the module system. See https://stackoverflow.com/q/54756176/4014509
	public static class MainApp extends Application {

		@Override
		public void start(Stage primaryStage) {
			LOG.info("JavaFX application started.");
			primaryStage.setMinWidth(652.0);
			primaryStage.setMinHeight(440.0);

			FxApplicationComponent fxApplicationComponent = CRYPTOMATOR_COMPONENT.fxApplicationComponent() //
					.fxApplication(this) //
					.mainWindow(primaryStage) //
					.build();

			MainController mainCtrl = fxApplicationComponent.fxmlLoader().load("/fxml/main.fxml");
			mainCtrl.initStage(primaryStage);
			primaryStage.show();
		}

		@Override
		public void stop() {
			LOG.info("JavaFX application stopped.");
		}

	}

}
