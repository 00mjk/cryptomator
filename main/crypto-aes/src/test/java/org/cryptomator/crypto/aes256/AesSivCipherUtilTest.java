package org.cryptomator.crypto.aes256;

import java.security.InvalidKeyException;

import org.apache.commons.codec.DecoderException;
import org.cryptomator.crypto.exceptions.DecryptFailedException;
import org.junit.Assert;
import org.junit.Test;

/**
 * Official RFC 5297 test vector taken from https://tools.ietf.org/html/rfc5297#appendix-A.1
 */
public class AesSivCipherUtilTest {

	@Test
	public void testS2v() throws DecoderException {
		final byte[] key = {(byte) 0xff, (byte) 0xfe, (byte) 0xfd, (byte) 0xfc, //
				(byte) 0xfb, (byte) 0xfa, (byte) 0xf9, (byte) 0xf8, //
				(byte) 0xf7, (byte) 0xf6, (byte) 0xf5, (byte) 0xf4, //
				(byte) 0xf3, (byte) 0xf2, (byte) 0xf1, (byte) 0xf0};

		final byte[] ad = {(byte) 0x10, (byte) 0x11, (byte) 0x12, (byte) 0x13, //
				(byte) 0x14, (byte) 0x15, (byte) 0x16, (byte) 0x17, //
				(byte) 0x18, (byte) 0x19, (byte) 0x1a, (byte) 0x1b, //
				(byte) 0x1c, (byte) 0x1d, (byte) 0x1e, (byte) 0x1f, //
				(byte) 0x20, (byte) 0x21, (byte) 0x22, (byte) 0x23, //
				(byte) 0x24, (byte) 0x25, (byte) 0x26, (byte) 0x27};

		final byte[] plaintext = {(byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, //
				(byte) 0x55, (byte) 0x66, (byte) 0x77, (byte) 0x88, //
				(byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, //
				(byte) 0xdd, (byte) 0xee};

		final byte[] expected = {(byte) 0x85, (byte) 0x63, (byte) 0x2d, (byte) 0x07, //
				(byte) 0xc6, (byte) 0xe8, (byte) 0xf3, (byte) 0x7f, //
				(byte) 0x95, (byte) 0x0a, (byte) 0xcd, (byte) 0x32, //
				(byte) 0x0a, (byte) 0x2e, (byte) 0xcc, (byte) 0x93};

		final byte[] result = AesSivCipherUtil.s2v(key, plaintext, ad);
		Assert.assertArrayEquals(expected, result);
	}

	@Test
	public void testSivEncrypt() throws InvalidKeyException {
		final byte[] key = {(byte) 0xff, (byte) 0xfe, (byte) 0xfd, (byte) 0xfc, //
				(byte) 0xfb, (byte) 0xfa, (byte) 0xf9, (byte) 0xf8, //
				(byte) 0xf7, (byte) 0xf6, (byte) 0xf5, (byte) 0xf4, //
				(byte) 0xf3, (byte) 0xf2, (byte) 0xf1, (byte) 0xf0, //
				(byte) 0xf0, (byte) 0xf1, (byte) 0xf2, (byte) 0xf3, //
				(byte) 0xf4, (byte) 0xf5, (byte) 0xf6, (byte) 0xf7, //
				(byte) 0xf8, (byte) 0xf9, (byte) 0xfa, (byte) 0xfb, //
				(byte) 0xfc, (byte) 0xfd, (byte) 0xfe, (byte) 0xff};

		final byte[] ad = {(byte) 0x10, (byte) 0x11, (byte) 0x12, (byte) 0x13, //
				(byte) 0x14, (byte) 0x15, (byte) 0x16, (byte) 0x17, //
				(byte) 0x18, (byte) 0x19, (byte) 0x1a, (byte) 0x1b, //
				(byte) 0x1c, (byte) 0x1d, (byte) 0x1e, (byte) 0x1f, //
				(byte) 0x20, (byte) 0x21, (byte) 0x22, (byte) 0x23, //
				(byte) 0x24, (byte) 0x25, (byte) 0x26, (byte) 0x27};

		final byte[] plaintext = {(byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, //
				(byte) 0x55, (byte) 0x66, (byte) 0x77, (byte) 0x88, //
				(byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, //
				(byte) 0xdd, (byte) 0xee};

		final byte[] expected = {(byte) 0x85, (byte) 0x63, (byte) 0x2d, (byte) 0x07, //
				(byte) 0xc6, (byte) 0xe8, (byte) 0xf3, (byte) 0x7f, //
				(byte) 0x95, (byte) 0x0a, (byte) 0xcd, (byte) 0x32, //
				(byte) 0x0a, (byte) 0x2e, (byte) 0xcc, (byte) 0x93, //
				(byte) 0x40, (byte) 0xc0, (byte) 0x2b, (byte) 0x96, //
				(byte) 0x90, (byte) 0xc4, (byte) 0xdc, (byte) 0x04, //
				(byte) 0xda, (byte) 0xef, (byte) 0x7f, (byte) 0x6a, //
				(byte) 0xfe, (byte) 0x5c};

		final byte[] result = AesSivCipherUtil.sivEncrypt(key, plaintext, ad);
		Assert.assertArrayEquals(expected, result);
	}

	@Test
	public void testSivDecrypt() throws DecryptFailedException, InvalidKeyException {
		final byte[] key = {(byte) 0xff, (byte) 0xfe, (byte) 0xfd, (byte) 0xfc, //
				(byte) 0xfb, (byte) 0xfa, (byte) 0xf9, (byte) 0xf8, //
				(byte) 0xf7, (byte) 0xf6, (byte) 0xf5, (byte) 0xf4, //
				(byte) 0xf3, (byte) 0xf2, (byte) 0xf1, (byte) 0xf0, //
				(byte) 0xf0, (byte) 0xf1, (byte) 0xf2, (byte) 0xf3, //
				(byte) 0xf4, (byte) 0xf5, (byte) 0xf6, (byte) 0xf7, //
				(byte) 0xf8, (byte) 0xf9, (byte) 0xfa, (byte) 0xfb, //
				(byte) 0xfc, (byte) 0xfd, (byte) 0xfe, (byte) 0xff};

		final byte[] ad = {(byte) 0x10, (byte) 0x11, (byte) 0x12, (byte) 0x13, //
				(byte) 0x14, (byte) 0x15, (byte) 0x16, (byte) 0x17, //
				(byte) 0x18, (byte) 0x19, (byte) 0x1a, (byte) 0x1b, //
				(byte) 0x1c, (byte) 0x1d, (byte) 0x1e, (byte) 0x1f, //
				(byte) 0x20, (byte) 0x21, (byte) 0x22, (byte) 0x23, //
				(byte) 0x24, (byte) 0x25, (byte) 0x26, (byte) 0x27};

		final byte[] ciphertext = {(byte) 0x85, (byte) 0x63, (byte) 0x2d, (byte) 0x07, //
				(byte) 0xc6, (byte) 0xe8, (byte) 0xf3, (byte) 0x7f, //
				(byte) 0x95, (byte) 0x0a, (byte) 0xcd, (byte) 0x32, //
				(byte) 0x0a, (byte) 0x2e, (byte) 0xcc, (byte) 0x93, //
				(byte) 0x40, (byte) 0xc0, (byte) 0x2b, (byte) 0x96, //
				(byte) 0x90, (byte) 0xc4, (byte) 0xdc, (byte) 0x04, //
				(byte) 0xda, (byte) 0xef, (byte) 0x7f, (byte) 0x6a, //
				(byte) 0xfe, (byte) 0x5c};

		final byte[] expected = {(byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, //
				(byte) 0x55, (byte) 0x66, (byte) 0x77, (byte) 0x88, //
				(byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, //
				(byte) 0xdd, (byte) 0xee};

		final byte[] result = AesSivCipherUtil.sivDecrypt(key, ciphertext, ad);
		Assert.assertArrayEquals(expected, result);
	}

	@Test(expected = DecryptFailedException.class)
	public void testSivDecryptWithInvalidKey() throws DecryptFailedException, InvalidKeyException {
		final byte[] key = {(byte) 0xff, (byte) 0xfe, (byte) 0xfd, (byte) 0xfc, //
				(byte) 0xfb, (byte) 0xfa, (byte) 0xf9, (byte) 0xf8, //
				(byte) 0xf7, (byte) 0xf6, (byte) 0xf5, (byte) 0xf4, //
				(byte) 0xf3, (byte) 0xf2, (byte) 0xf1, (byte) 0xf0, //
				(byte) 0xf0, (byte) 0xf1, (byte) 0xf2, (byte) 0xf3, //
				(byte) 0xf4, (byte) 0xf5, (byte) 0xf6, (byte) 0xf7, //
				(byte) 0xf8, (byte) 0xf9, (byte) 0xfa, (byte) 0xfb, //
				(byte) 0xfc, (byte) 0xfd, (byte) 0xfe, (byte) 0x00};

		final byte[] ad = {(byte) 0x10, (byte) 0x11, (byte) 0x12, (byte) 0x13, //
				(byte) 0x14, (byte) 0x15, (byte) 0x16, (byte) 0x17, //
				(byte) 0x18, (byte) 0x19, (byte) 0x1a, (byte) 0x1b, //
				(byte) 0x1c, (byte) 0x1d, (byte) 0x1e, (byte) 0x1f, //
				(byte) 0x20, (byte) 0x21, (byte) 0x22, (byte) 0x23, //
				(byte) 0x24, (byte) 0x25, (byte) 0x26, (byte) 0x27};

		final byte[] ciphertext = {(byte) 0x85, (byte) 0x63, (byte) 0x2d, (byte) 0x07, //
				(byte) 0xc6, (byte) 0xe8, (byte) 0xf3, (byte) 0x7f, //
				(byte) 0x95, (byte) 0x0a, (byte) 0xcd, (byte) 0x32, //
				(byte) 0x0a, (byte) 0x2e, (byte) 0xcc, (byte) 0x93, //
				(byte) 0x40, (byte) 0xc0, (byte) 0x2b, (byte) 0x96, //
				(byte) 0x90, (byte) 0xc4, (byte) 0xdc, (byte) 0x04, //
				(byte) 0xda, (byte) 0xef, (byte) 0x7f, (byte) 0x6a, //
				(byte) 0xfe, (byte) 0x5c};

		final byte[] expected = {(byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, //
				(byte) 0x55, (byte) 0x66, (byte) 0x77, (byte) 0x88, //
				(byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, //
				(byte) 0xdd, (byte) 0xee};

		final byte[] result = AesSivCipherUtil.sivDecrypt(key, ciphertext, ad);
		Assert.assertArrayEquals(expected, result);
	}
}
